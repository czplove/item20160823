// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash


// Identifier tags for tokens
// Creator for attribute: ZCL version, singleton.
#define CREATOR_VERSION_SINGLETON 0xB000
// Creator for attribute: application version, singleton.
#define CREATOR_APPLICATION_VERSION_SINGLETON 0xB001
// Creator for attribute: stack version, singleton.
#define CREATOR_STACK_VERSION_SINGLETON 0xB002
// Creator for attribute: hardware version, singleton.
#define CREATOR_HW_VERSION_SINGLETON 0xB003
// Creator for attribute: manufacturer name, singleton.
#define CREATOR_MANUFACTURER_NAME_SINGLETON 0xB004
// Creator for attribute: model identifier, singleton.
#define CREATOR_MODEL_IDENTIFIER_SINGLETON 0xB005
// Creator for attribute: date code, singleton.
#define CREATOR_DATE_CODE_SINGLETON 0xB006
// Creator for attribute: power source, singleton.
#define CREATOR_POWER_SOURCE_SINGLETON 0xB007
// Creator for attribute: on/off, endpoint: 1
#define CREATOR_ON_OFF_1 0xB008
// Creator for attribute: current summation delivered, endpoint: 1
#define CREATOR_CURRENT_SUMMATION_DELIVERED_1 0xB009
// Creator for attribute: number of resets, singleton.
#define CREATOR_NUMBER_OF_RESETS_SINGLETON 0xB00A
// Creator for attribute: mac tx unicast retry, singleton.
#define CREATOR_MAC_TX_UCAST_RETRY_SINGLETON 0xB00B
// Creator for attribute: aps tx unicast retries, singleton.
#define CREATOR_APS_TX_UCAST_RETRY_SINGLETON 0xB00C
// Creator for attribute: route discovery initiated, singleton.
#define CREATOR_ROUTE_DISC_INITIATED_SINGLETON 0xB00D
// Creator for attribute: neighbor added, singleton.
#define CREATOR_NEIGHBOR_ADDED_SINGLETON 0xB00E
// Creator for attribute: neighbor moved, singleton.
#define CREATOR_NEIGHBOR_REMOVED_SINGLETON 0xB00F
// Creator for attribute: neighbor stale, singleton.
#define CREATOR_NEIGHBOR_STALE_SINGLETON 0xB010
// Creator for attribute: join indication, singleton.
#define CREATOR_JOIN_INDICATION_SINGLETON 0xB011
// Creator for attribute: child moved, singleton.
#define CREATOR_CHILD_MOVED_SINGLETON 0xB012
// Creator for attribute: average mac retry per aps message sent, singleton.
#define CREATOR_AVERAGE_MAC_RETRY_PER_APS_MSG_SENT_SINGLETON 0xB013
// Creator for attribute: last message lqi, singleton.
#define CREATOR_LAST_MESSAGE_LQI_SINGLETON 0xB014
// Creator for attribute: last message rssi, singleton.
#define CREATOR_LAST_MESSAGE_RSSI_SINGLETON 0xB015
// Creator for MAX71020: calibration parameter
#define CREATOR_MAX71020_AFE_PARAMTER   0xB016

// Types for the tokens
#ifdef DEFINETYPES
typedef uint8_t  tokType_version;
typedef uint8_t  tokType_application_version;
typedef uint8_t  tokType_stack_version;
typedef uint8_t  tokType_hw_version;
typedef uint8_t  tokType_manufacturer_name[33];
typedef uint8_t  tokType_model_identifier[33];
typedef uint8_t  tokType_date_code[17];
typedef uint8_t  tokType_power_source;
typedef uint8_t  tokType_current_summation_delivered[6];
typedef uint8_t  tokType_on_off;
typedef int8_t  tokType_last_message_rssi;
typedef uint8_t  tokType_last_message_lqi;
typedef uint16_t  tokType_average_mac_retry_per_aps_msg_sent;
typedef uint16_t  tokType_child_moved;
typedef uint16_t  tokType_join_indication;
typedef uint16_t  tokType_neighbor_stale;
typedef uint16_t  tokType_neighbor_removed;
typedef uint16_t  tokType_neighbor_added;
typedef uint16_t  tokType_route_disc_initiated;
typedef uint16_t  tokType_aps_tx_ucast_retry;
typedef uint16_t  tokType_mac_tx_ucast_retry;
typedef uint16_t  tokType_number_of_resets;
typedef uint8_t  tokType_max71020_afe_paramter[36];

#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(VERSION_SINGLETON, tokType_version, 0x02)
DEFINE_BASIC_TOKEN(APPLICATION_VERSION_SINGLETON, tokType_application_version, 0x01)
DEFINE_BASIC_TOKEN(STACK_VERSION_SINGLETON, tokType_stack_version, 0x01)
DEFINE_BASIC_TOKEN(HW_VERSION_SINGLETON, tokType_hw_version, 0x01)
DEFINE_BASIC_TOKEN(MANUFACTURER_NAME_SINGLETON, tokType_manufacturer_name, {6,'W','u','l','i','a','n',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})
DEFINE_BASIC_TOKEN(MODEL_IDENTIFIER_SINGLETON, tokType_model_identifier, {6,'T','-','C','Z','0','X',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})
DEFINE_BASIC_TOKEN(DATE_CODE_SINGLETON, tokType_date_code, {8,'2','0','1','6','0','3','1','7',0,0,0,0,0,0,0,0})
DEFINE_BASIC_TOKEN(POWER_SOURCE_SINGLETON, tokType_power_source, 0x01)
DEFINE_BASIC_TOKEN(ON_OFF_1, tokType_on_off, 0x00)
DEFINE_BASIC_TOKEN(CURRENT_SUMMATION_DELIVERED_1, tokType_current_summation_delivered, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
DEFINE_BASIC_TOKEN(NUMBER_OF_RESETS_SINGLETON, tokType_number_of_resets, 0x0000)
DEFINE_BASIC_TOKEN(MAC_TX_UCAST_RETRY_SINGLETON, tokType_mac_tx_ucast_retry, 0x0000)
DEFINE_BASIC_TOKEN(APS_TX_UCAST_RETRY_SINGLETON, tokType_aps_tx_ucast_retry, 0x0000)
DEFINE_BASIC_TOKEN(ROUTE_DISC_INITIATED_SINGLETON, tokType_route_disc_initiated, 0x0000)
DEFINE_BASIC_TOKEN(NEIGHBOR_ADDED_SINGLETON, tokType_neighbor_added, 0x0000)
DEFINE_BASIC_TOKEN(NEIGHBOR_REMOVED_SINGLETON, tokType_neighbor_removed, 0x0000)
DEFINE_BASIC_TOKEN(NEIGHBOR_STALE_SINGLETON, tokType_neighbor_stale, 0x0000)
DEFINE_BASIC_TOKEN(JOIN_INDICATION_SINGLETON, tokType_join_indication, 0x0000)
DEFINE_BASIC_TOKEN(CHILD_MOVED_SINGLETON, tokType_child_moved, 0x0000)
DEFINE_BASIC_TOKEN(AVERAGE_MAC_RETRY_PER_APS_MSG_SENT_SINGLETON, tokType_average_mac_retry_per_aps_msg_sent, 0x0000)
DEFINE_BASIC_TOKEN(LAST_MESSAGE_LQI_SINGLETON, tokType_last_message_lqi, 0x0000)
DEFINE_BASIC_TOKEN(LAST_MESSAGE_RSSI_SINGLETON, tokType_last_message_rssi, 0x0000)
DEFINE_BASIC_TOKEN(MAX71020_AFE_PARAMTER, tokType_max71020_afe_paramter, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  uint8_t ptr[33]; \
  uint8_t curNetwork = emberGetCurrentNetwork(); \
  uint8_t epNetwork; \
  halCommonGetToken((tokType_version *)ptr, TOKEN_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_VERSION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_application_version *)ptr, TOKEN_APPLICATION_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_APPLICATION_VERSION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_stack_version *)ptr, TOKEN_STACK_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_STACK_VERSION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_hw_version *)ptr, TOKEN_HW_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_HW_VERSION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_manufacturer_name *)ptr, TOKEN_MANUFACTURER_NAME_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_MANUFACTURER_NAME_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_model_identifier *)ptr, TOKEN_MODEL_IDENTIFIER_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_MODEL_IDENTIFIER_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_date_code *)ptr, TOKEN_DATE_CODE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_DATE_CODE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_power_source *)ptr, TOKEN_POWER_SOURCE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_POWER_SOURCE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_number_of_resets *)ptr, TOKEN_NUMBER_OF_RESETS_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_NUMBER_OF_RESETS_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_mac_tx_ucast_retry *)ptr, TOKEN_MAC_TX_UCAST_RETRY_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_MAC_TX_UCAST_RETRY_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_aps_tx_ucast_retry *)ptr, TOKEN_APS_TX_UCAST_RETRY_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_APS_TX_UCAST_RETRY_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_route_disc_initiated *)ptr, TOKEN_ROUTE_DISC_INITIATED_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_ROUTE_DISC_INITIATED_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_neighbor_added *)ptr, TOKEN_NEIGHBOR_ADDED_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_NEIGHBOR_ADDED_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_neighbor_removed *)ptr, TOKEN_NEIGHBOR_REMOVED_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_NEIGHBOR_REMOVED_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_neighbor_stale *)ptr, TOKEN_NEIGHBOR_STALE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_NEIGHBOR_STALE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_join_indication *)ptr, TOKEN_JOIN_INDICATION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_JOIN_INDICATION_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_child_moved *)ptr, TOKEN_CHILD_MOVED_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_CHILD_MOVED_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_average_mac_retry_per_aps_msg_sent *)ptr, TOKEN_AVERAGE_MAC_RETRY_PER_APS_MSG_SENT_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_AVERAGE_MAC_RETRY_PER_APS_MSG_SENT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_last_message_lqi *)ptr, TOKEN_LAST_MESSAGE_LQI_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_LAST_MESSAGE_LQI_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_last_message_rssi *)ptr, TOKEN_LAST_MESSAGE_RSSI_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_DIAGNOSTICS_CLUSTER_ID, ZCL_LAST_MESSAGE_RSSI_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8S_ATTRIBUTE_TYPE); \
  epNetwork = emberAfNetworkIndexFromEndpoint(1); \
  if((endpoint) == 1 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_on_off *)ptr, TOKEN_ON_OFF_1); \
    emberAfWriteServerAttribute(1, ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BOOLEAN_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_current_summation_delivered *)ptr, TOKEN_CURRENT_SUMMATION_DELIVERED_1); \
    emberAfWriteServerAttribute(1, ZCL_SIMPLE_METERING_CLUSTER_ID, ZCL_CURRENT_SUMMATION_DELIVERED_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT48U_ATTRIBUTE_TYPE); \
  } \
} while(false)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  uint8_t allZeroData[33]; \
  MEMSET(allZeroData, 0, 33); \
  if ( data == NULL ) data = allZeroData; \
  if ( clusterId == 0x00 ) { \
    if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0001 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_APPLICATION_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0002 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_STACK_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0003 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_HW_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0004 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_MANUFACTURER_NAME_SINGLETON, data); \
    if ( metadata->attributeId == 0x0005 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_MODEL_IDENTIFIER_SINGLETON, data); \
    if ( metadata->attributeId == 0x0006 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_DATE_CODE_SINGLETON, data); \
    if ( metadata->attributeId == 0x0007 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_POWER_SOURCE_SINGLETON, data); \
  } else if ( clusterId == 0x0B05 ) { \
    if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_NUMBER_OF_RESETS_SINGLETON, data); \
    if ( metadata->attributeId == 0x0104 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_MAC_TX_UCAST_RETRY_SINGLETON, data); \
    if ( metadata->attributeId == 0x010A && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_APS_TX_UCAST_RETRY_SINGLETON, data); \
    if ( metadata->attributeId == 0x010C && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_ROUTE_DISC_INITIATED_SINGLETON, data); \
    if ( metadata->attributeId == 0x010D && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_NEIGHBOR_ADDED_SINGLETON, data); \
    if ( metadata->attributeId == 0x010E && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_NEIGHBOR_REMOVED_SINGLETON, data); \
    if ( metadata->attributeId == 0x010F && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_NEIGHBOR_STALE_SINGLETON, data); \
    if ( metadata->attributeId == 0x0110 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_JOIN_INDICATION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0111 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_CHILD_MOVED_SINGLETON, data); \
    if ( metadata->attributeId == 0x011B && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_AVERAGE_MAC_RETRY_PER_APS_MSG_SENT_SINGLETON, data); \
    if ( metadata->attributeId == 0x011C && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_LAST_MESSAGE_LQI_SINGLETON, data); \
    if ( metadata->attributeId == 0x011D && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_LAST_MESSAGE_RSSI_SINGLETON, data); \
  }\
  if ( endpoint == 1 ) { \
    if ( clusterId == 0x06 ) { \
      if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ON_OFF_1, data); \
    } else if ( clusterId == 0x0702 ) { \
      if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_CURRENT_SUMMATION_DELIVERED_1, data); \
    } \
  } \
} while(false)


